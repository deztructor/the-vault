#!/bin/bash

master=vault
root_version=3

function error {
    rc=$1
    echo "`basename $0`: ${@:2}" 1>&2;
    exit $rc
}

is_trace=false
if [ "x$VAULT_TRACE" != "x" ]; then
  is_trace=true  
fi

function trace {
    if $is_trace; then
        echo "`basename $0`: ${@:1}" 1>&2;
    fi
}

if [ $# -eq 1 ]; then
    src=$1
else
    src=`dirname $0`
    src=`cd $src;pwd`
fi
trace "SCRIPTS DIR: $src"
export PATH=$src:$PATH

function ensure_param_count_op_exit_usage {
    if ! [ $1 $2 $3 ]; then
        local name=`basename $0`
        echo "Expecting param count: $1 $2 $3" 1>&2;
        echo "Params was: ${@:5}" 1>&2;
        echo "Usage: $name $4" 1>&2;
        exit $1
    fi
}

function ensure_param_count_exit_usage {
    ensure_param_count_op_exit_usage $1 -eq $2 ${@:3}
}

function get_root {
    root=$(the-vault-root)
    if [ $? -ne 0 ]; then
        error $? "Not a vault?"
    fi
}

function get_root_and_enter {
    get_root
    cd $root || error 2 "Can't enter $root"
}

function get_unit_and_enter {
    get_root
    unit=$1
    unit_dir=$root/$unit
    cd $unit || error 2 "Can't enter $unit_dir"
}

function get_current_branch {
    branch=$(git rev-parse --abbrev-ref HEAD)
}

function ini_get {
    fname=$1
    section=$2
    key=$3
    if ! [ -f "$fname" ]; then
        error 333 "File path '$fname' is wrong"
    fi
    awk -f $src/ini-process.awk -v section="$section" -v key="$key" $fname \
        || error 65 "ini-process error", "$@"
}

function ini_set {
    fname=$1
    section=$2
    key=$3
    value=$4

    if ! [ -f "$fname" ]; then
        error 333 "File path '$fname' is wrong"
    fi
    awk -f $src/ini-process.awk -v section="$section" -v key="$key" -v op=set -v value="$value" $fname \
        || error 65 "ini-process error", "$@"
}

unit_version=$(ini_get $src/vault-unit.template core version)

function check_vault_unit_compatible {
    local fname=./.vault-unit
    if ! [ -f "$fname" ]; then
        error 333 "is_vault_unit_compatible: Not a file `pwd`/$fname"
    fi

    local version=$(ini_get $fname core version)
    if [ $? -ne 0 ]; then error 513 "Can't get unit version from $fname?"; fi
    if [ $version -gt $unit_version ]; then
        echo "Unit version $version > expected $unit_version"
        return 1
    fi

    local name=$(ini_get $fname core name)
    if [ $? -ne 0 ]; then error 513 "Can't get unit name from $fname, is it set?"; fi
    if [ "x$name" == "x" ]; then
        echo "Empty unit name in $fname"
    fi
    return 0
}

vault_misc=1
