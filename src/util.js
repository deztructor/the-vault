/*
 * Misc helper functions
 *
 * Copyright (C) 2012, 2013 Jolla Ltd.
 * Contact: Denis Zalevskiy <denis.zalevskiy@jollamobile.com>
 *
 * Some code was taken from “JavaScript: The Good Parts by Dou- glas
 * Crockford. Copyright 2008 Yahoo! Inc., 978-0-596-51774-8.”

 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 */

// Generated by CoffeeScript 1.4.0
(function() {
    if (lib.util && lib.error)
        return;

    var all, any, __slice = [].slice;

    Function.prototype.method = function(name, func) {
        this.prototype[name] = func;
        return this;
    };

    QByteArray.method('toString', function() {
        var s = new QTextStream(this, QIODevice.ReadOnly)
        return s.readAll()
    })

    var foreach = function(arr, fn) {
        var i;
        for (i = 0; i < arr.length; ++i)
            fn(arr[i]);
    }

    var first = function(arr, fn, start) {
        var i;
        for (i = (start || 0); i < arr.length; ++i)
            if (fn.apply(arr[i]))
                break;
        return i;
    }

    var find_all = function(arr, fn) {
        var i;
        var found = [];
        for (i = first(arr, fn, 0); i < arr.length; i = first(arr, fn, i))
            found.push(i);
        return found;
    }

    var map = function(arr, fn) {
        var i;
        var res = [];
        for (i = 0; i < arr.length; ++i)
            res.push(fn.apply(arr[i]));
        return res;
    }

    Function.method('curry', function() {
        var head,
        _this = this;
        head = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return function() {
            var tail;
            tail = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this.apply(null, head.concat(tail));
        };
    });

    Number.method('integer', function() {
        return Math[this < 0 ? 'ceil' : 'floor'](this);
    });

    if (typeof Object.create !== 'function') {
        Object.create = function(o) {
            var F;
            F = function() {};
            F.prototype = o;
            return new F();
        };
    }

    String.method('trim', function() {
        return this.replace(/^\s+|\s+$/g, '');
    })

    any = function(items) {
        var item, _i, _len;
        for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (item) {
                return true;
            }
        }
        return false;
    };

    all = function(items) {
        var item, _i, _len;
        for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (!item) {
                return false;
            }
        }
        return true;
    };

    lib.util = {
        is_any: any,
        is_all: all,
        foreach : foreach,
        map : map,
        first : first,
        all : find_all
    };

    lib.error = function(data) {
        data.toString = function() {
            return JSON.stringify(data);
        };
        return data;
    };

}).call(this);
